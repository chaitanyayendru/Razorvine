version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: razorvine-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow tracking server
  mlflow:
    image: python:3.9-slim
    container_name: razorvine-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./:/app
      - mlflow_data:/mlflow
    working_dir: /app
    command: >
      bash -c "pip install mlflow && 
               mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow/mlflow.db --default-artifact-root file:/mlflow"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main RazorVine API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: razorvine-api
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./static:/app/static
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENVIRONMENT=development
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter notebook server
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: razorvine-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./:/app
      - ./notebooks:/app/notebooks
      - jupyter_data:/home/razorvine/.jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=razorvine
    command: >
      bash -c "jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='razorvine'"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: razorvine-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    profiles:
      - production

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: razorvine-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=razorvine
      - POSTGRES_USER=razorvine
      - POSTGRES_PASSWORD=razorvine123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U razorvine"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: razorvine-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: razorvine-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=razorvine123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  redis_data:
  mlflow_data:
  jupyter_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: razorvine-network 